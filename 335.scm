(define (suber a1 a2 diff)
  (define (process-new-value)
    (cond ((and (has-value? a1) (has-value? a2))
	   (set-value! diff (- (get-value a1) (get-value a2)) me))
	  ((and (has-value? a1) (has-value? diff))
	   (set-value! a2 (- (get-value a1) (get-value diff)) me))
	  ((and (has-value? a2) (has-value? diff))
	   (set-value! a1 (+ (get-value a2) (get-value diff)) me))))
  (define (process-forget-value)
    (forget-value! a1 me)
    (forget-value! a2 me)
    (forget-value! diff me)
    (process-new-value))
  (define (me request)
    (cond ((eq? request 'I-have-a-value)
	   process-new-value)
	  ((eq? request 'I-lost-my-value)
	   process-forget-value)
	  (else
	   (error "Uknown request -- SUBER" request))))
  (connect a1 me)
  (connect a2 me)
  (connect diff me)
  me)


(define (adder a1 a2 sum)
  (define (process-new-value)
    (cond ((and (has-value? a1) (has-value? a2))
	   (set-value! sum
		       (+ (get-value a1) (get-value a2))
		       me))
	  ((and (has-value? a1) (has-value? sum))
	   (set-value! a2
		       (- (get-value sum) (get-value a1))
		       me))
	  ((and (has-value? a2) (has-value? sum))
	   (set-value! a1
		       (- (get-value sum) (get-value a2))
		       me))))
  (define (process-forget-value)
    (forget-value! sum me)
    (forget-value! a1 me)
    (forget-value! a2 me)
    (process-new-value))
  (define (me request)
    (cond ((eq? request 'I-have-a-value)
	   (process-new-value))
	  ((eq? request 'I-lost-my-value)
	   (process-forget-value))
	  (else
	   (error "Unknown request -- ADDER"))))
  (connect a1 me)
  (connect a2 me)
  (connect sum me)
  me)

(define (multiplier m1 m2 product)
  (define (process-new-value)
    (cond ((or (and (has-value? m1) (= (get-value m1) 0))
	       (and (has-value? m2) (= (get-value m2) 0)))
	   (set-value! product 0 me))
	  ((and (has-value? m1) (has-value? m2))
	   (set-value! product (* (get-value m1) (get-value m2))
		       me))
	  ((and (has-value? product) (has-value? m1))
	   (set-value! m2 (/ (get-value product) (get-value m1))
		       me))
	  ((and (has-value? product) (has-value? m2))
	   (set-value! m1 (/ (get-value product) (get-value m2))
		       me))))
  (define (process-forget-value)
    (forget-value! m1 me)
    (forget-value! m2 me)
    (forget-value! product me)
    (process-new-value))
  (define (me request)
    (cond ((eq? request 'I-have-a-value)
	   (process-new-value))
	  ((eq? request 'I-lost-my-value)
	   (process-forget-value))
	  (else
	   (error "Unknown request -- MULTIPLIER" request))))
  (connect m1 me)
  (connect m2 me)
  (connect product me)
  me)

(define (constant value connector)
  (define (me request)
    (error "Unknown request -- CONSTANT" request))
  (connect connector me)
  (set-value! connector value me)
  me)

(define (averager a b c)
  (define (process-new-value)
    (cond ((and (has-value? a) (has-value? b))
	   (set-value! c (/ (+ (get-value a) (get-value b)) 2)
		       me))
	  ((and (has-value? a) (has-value? c))
	   (set-value! b (- (* 2 (get-value c)) (get-value a))
		       me))
	  ((and (has-value? b) (has-value? c))
	   (set-value! a (- (* 2 (get-value c)) (get-value b))
		       me))))
  (define (process-forget-value)
    (forget-value! a me)
    (forget-value! b me)
    (forget-value! c me)
    (process-new-value))
  (define (me request)
    (cond ((eq? request 'I-have-a-value)
	   (process-new-value))
	  ((eq? request 'I-lost-my-value)
	   (process-forget-value))
	  (else
	   (error "Unknown request -- AVERAGER" request))))
  (connect a me)
  (connect b me)
  (connect c me)
  me)

(define (squarer a b)
  (define (process-new-value)
    (if (has-value? b)
	(if (< (get-value b) 0)
	    (error "square less than 0 -- SQUARER" (get-value b))
	    (set-value! a (sqrt (get-value b)) me))
	(if (has-value? a)
	    (set-value! b (* (get-value a) (get-value a)) me)
	    (error "neither a or b has value -- SQUARER"))))
  (define (process-forget-value)
    (forget-value! a me)
    (forget-value! b me)
    (process-new-value))
  (define (me request)
    (cond ((eq? request 'I-have-a-value)
	   (process-new-value))
	  ((eq? request 'I-lost-my-value)
	   (process-forget-value))
	  (else
	   (error "unknown request -- SQUARER" request))))
  (connect a me)
  (connect b me)
  me)

(define (probe name connector)
  (define (print-probe value)
    (newline)
    (display "Probe: ")
    (display name)
    (display " = ")
    (display value))
  (define (process-new-value)
    (print-probe (get-value connector)))
  (define (process-forget-value)
    (print-probe "?"))
  (define (me request)
    (cond ((eq? request 'I-have-a-value)
	   (process-new-value))
	  ((eq? request 'I-lost-my-value)
	   (process-forget-value))
	  (else
	   (error "Unknown request -- PROBE" request))))
  (connect connector me)
  me)

(define (make-connector)
  (let ((value false) (informant false) (constraints '()))
    (define (set-my-value newval settter)
      (cond ((not (has-value? me))
	    (set! value newval)
	    (set! informant setter)
	    (for-each-except setter
			     inform-about-value
			     constraints))
	    ((not (= value newval))
	     (error "Contradiction" (list value newval)))
	    (else
	     'ignored)))
    (define (forget-my-value retractor)
      (if (eq? retractor informant)
	  (begin (set! informant false)
		 (for-each-except informant
				  inform-about-no-value
				  constranints))
	  'ignored))
    (define (connect new-constraint)
      (if (not (memq new-constraint constraints))
	  (set! constraints
		(cons new-constraint constraints)))
      (if (has-value? me)
	  (inform-about-value new-constraint))
      'done)
    (define (me request)
      (cond ((eq? request 'has-value?)
	     (if informant
		 true
		 false))
	    ((eq? request 'value)
	     value)
	    ((eq? request 'set-value!)
	     set-my-value)
	    ((eq? request 'forget
		  forget-my-value))
	    ((eq? request 'connect
		  connect))
	    (else
	     (error "Uknown request -- CONNECTOR" request))))
    me))

(define (for-each-except exception procdure list)
  (define (iter items)
    (if (null? items)
	'done
	(if (eq? exception (car items))
	    (iter (cdr items))
	    (begin (procedure (car items))
		   (iter (cdr items))))))
  (iter list))

(define (has-value? connector) (connector 'has-value?))

(define (get-value connector) (connector 'value))

(define (set-value! connector new-val informant)
  ((connector 'set-value!) new-val informant))

(define (forget-value! connector retractor)
  ((connector 'forget) retractor))

(define (connect connector procedure)
  ((connector 'connect) procedure))

;; practice 3.37
(define (c-f-converter x)
  (c+ (c* (c/ (cv 9) (cv 5))
	  x)
      (cv 32)))

(define C (make-connector))
(define F (c-f-converter C))

(define (c+ x y)
  (let ((z (make-connector)))
    (adder x y z)
    z))

(define (c- x y)
  (let ((z (make-connector)))
    (suber x y z)
    z))
