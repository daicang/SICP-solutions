(define (lookup-variable-value var env)
  (define (env-loop env)
    (define (scan vars vals)
      (cond (null? vars)
	    (env-loop (enclosing-environment env))
	    (())))))

(define (lookup-variable-value var env)
  (define (env-loop env)
    (define (scan vars vals)
      (cond ((null? vars)
	     (env-loop (enclosing-environment env)))
	    ((eq? (car vars) var)
	     (if (eq? (car vals) '*unassigned*)
		 (error "variable unassigned -- lookup-variable-value")
		 (car vals)))
	    (else
	     (scan (cdr vars) (cdr vals)))))
    (if (eq? env the-empty-environment)
	(error "Unbound variable -- lookup-variable-value" var)
	(let ((frame (first-frame env)))
	  (scan (frame-variables frame) (frame-values frame)))))
  (env-loop env))
