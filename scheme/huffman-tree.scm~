(define (make-leaf symbol weight) (cons 'leaf symbol weight))

(define (leaf? x) (eq? (car x) 'leaf))

(define (symbol-leaf x) (cadr x))

(define (weight-leaf x) (caddr x))

(define (symbols x)
  (if (leaf? x)
      (symbol-leaf x)
      (caddr x)))

(define (weight x)
  (if (leaf? x)
      (weight-leaf x)
      (cadddr x)))

(define (make-code-tree left right)
  (list left
	right
	(append (symbols left) (symbols right))
	(+ (weight left) (weight right))))

(define (left-branch x) (car x))

(define (right-branch x) (cadr x))

(define (choose-branch bit tree)
  (cond ((= 0 bit) (left-branch tree))
	((= 1 bit) (right-branch tree))
	(else (error "bad bit -- CHOOSE-BRANCH" bit))))

(define (decode bits tree)
  (define (decode-1 bits curr)
    (if (null? bits)
	'()
	(let ((next-branch (choose-branch (car bits) curr)))
	  (if (leaf? next-branch)
	      (cons (symbol-leaf next-branch)
		    (decode-1 (cdr bits) tree))
	      (decode-1 (cdr bits) next-branch)))))
  (decode-1 bits tree))

(define sample-tree
  (make-code-tree (make-leaf 'A 4)
		  (make-code-tree (make-leaf 'B 2)
				  (make-code-tree (make-leaf 'D 1)
						  (make-leaf 'C 1)))))

(define sample-message '(0 1 1 0 0 1 0 1 0 1 1 1 0))
