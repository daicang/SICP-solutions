(define (safe l)
  
  (define (loop curr rest)
    (if (null? rest)
	#t
	(let ((cmp (car rest)))
	  )))

(define (safe positions)
  (let ((len (length positions)))
    (define (loop curr rest curr-pos)
      (if (null? rest)
	  #t
	  (let ((test (car rest))
		(test-pos (length rest)))
	    (if (= curr test)
		#f
		(and (not (= (abs (- curr test))
			     (abs (- curr-pos test-pos))))
		     (loop curr (cdr rest) curr-pos))))))
    (loop (car positons) (cdr positions) len)))

(define (queens)
  (let ((amb8 (amb 1 2 3 4 5 6 7 8)))
    (let ((p1 amb8)
	  (p2 amb8)
	  (p3 amb8)
	  (p4 amb8)
	  (p5 amb8)
	  (p6 amb8)
	  (p7 amb8)
	  (p8 amb8))
      (require (safe (p2 p1)))
      (require (safe (p3 p2 p1)))
      (require (safe (p4 p3 p2 p1)))
      (require (safe (p5 p4 p3 p2 p1)))
      (require (safe (p6 p5 p4 p3 p2 p1)))
      (require (safe (p7 p6 p5 p4 p3 p2 p1)))
      (require (safe (p8 p7 p6 p5 p4 p3 p2 p1)))
      (list p1 p2 p3 p4 p5 p6 p7 p8))))
